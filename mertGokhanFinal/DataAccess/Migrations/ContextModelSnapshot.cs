// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EntityLayer.Entities.category", b =>
                {
                    b.Property<int>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("categoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("categoryID");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("EntityLayer.Entities.product", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("categoriescategoryID")
                        .HasColumnType("int");

                    b.Property<string>("createDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("productName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("productID");

                    b.HasIndex("categoriescategoryID");

                    b.ToTable("products");
                });

            modelBuilder.Entity("EntityLayer.Entities.tag", b =>
                {
                    b.Property<int>("tagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("tagName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("tagID");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("EntityLayer.Entities.tag_product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<int>("tagID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("productID");

                    b.HasIndex("tagID");

                    b.ToTable("tag_products");
                });

            modelBuilder.Entity("EntityLayer.Entities.product", b =>
                {
                    b.HasOne("EntityLayer.Entities.category", "categories")
                        .WithMany("products")
                        .HasForeignKey("categoriescategoryID");

                    b.Navigation("categories");
                });

            modelBuilder.Entity("EntityLayer.Entities.tag_product", b =>
                {
                    b.HasOne("EntityLayer.Entities.product", "product")
                        .WithMany("tag_products")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.tag", "tag")
                        .WithMany("tag_products")
                        .HasForeignKey("tagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("EntityLayer.Entities.category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("EntityLayer.Entities.product", b =>
                {
                    b.Navigation("tag_products");
                });

            modelBuilder.Entity("EntityLayer.Entities.tag", b =>
                {
                    b.Navigation("tag_products");
                });
#pragma warning restore 612, 618
        }
    }
}
